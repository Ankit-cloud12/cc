const fontStyles = {
    "Normal Text": (text: string) => text,
    "Enclosed": (text: string) => {
      const enclosedMap = {
        "a": "üÖê", "b": "üÖë", "c": "üÖí", "d": "üÖì", "e": "üÖî", "f": "üÖï", "g": "üÖñ", "h": "üÖó", "i": "üÖò", "j": "üÖô", "k": "üÖö", "l": "üÖõ", "m": "üÖú", "n": "üÖù", "o": "üÖû", "p": "üÖü", "q": "üÖ†", "r": "üÖ°", "s": "üÖ¢", "t": "üÖ£", "u": "üÖ§", "v": "üÖ•", "w": "üÖ¶", "x": "üÖß", "y": "üÖ®", "z": "üÖ©",
        "A": "üÖê", "B": "üÖë", "C": "üÖí", "D": "üÖì", "E": "üÖî", "F": "üÖï", "G": "üÖñ", "H": "üÖó", "I": "üÖò", "J": "üÖô", "K": "üÖö", "L": "üÖõ", "M": "üÖú", "N": "üÖù", "O": "üÖû", "P": "üÖü", "Q": "üÖ†", "R": "üÖ°", "S": "üÖ¢", "T": "üÖ£", "U": "üÖ§", "V": "üÖ•", "W": "üÖ¶", "X": "üÖß", "Y": "üÖ®", "Z": "üÖ©",
        "0": "‚ì™", "1": "‚ë†", "2": "‚ë°", "3": "‚ë¢", "4": "‚ë£", "5": "‚ë§", "6": "‚ë•", "7": "‚ë¶", "8": "‚ëß", "9": "‚ë®"
      };
      return text
        .split("")
        .map((char) => enclosedMap[char] || char)
        .join("");
    },
     "Bold Sans": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1D5B2;
      const baseStartLower = 0x1D5EA;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(baseStartUpper + (charCode - baseOffset));
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1D7D8 + (charCode - 48));
        }
         else {
          output += text[i];
        }
      }
      return output;
    },
    "Italic Math": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1D434;
      const baseStartLower = 0x1D44E;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(baseStartUpper + (charCode - baseOffset));
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1D7C0 + (charCode - 48));
        }
         else {
          output += text[i];
        }
      }
      return output;
    },
    "Full Width": (text: string) => {
      const fullWidthMap = {
        " ": "„ÄÄ", "!": "ÔºÅ", '"': "ÔºÇ", "#": "ÔºÉ", "$": "ÔºÑ", "%": "ÔºÖ", "&": "ÔºÜ", "'": "Ôºá", "(": "Ôºà", ")": "Ôºâ", "*": "Ôºä", "+": "Ôºã", ",": "Ôºå", "-": "Ôºç", ".": "Ôºé", "/": "Ôºè", "0": "Ôºê", "1": "Ôºë", "2": "Ôºí", "3": "Ôºì", "4": "Ôºî", "5": "Ôºï", "6": "Ôºñ", "7": "Ôºó", "8": "Ôºò", "9": "Ôºô", ":": "Ôºö", ";": "Ôºõ", "<": "Ôºú", "=": "Ôºù", ">": "Ôºû", "?": "Ôºü", "@": "Ôº†", "A": "Ôº°", "B": "Ôº¢", "C": "Ôº£", "D": "Ôº§", "E": "Ôº•", "F": "Ôº¶", "G": "Ôºß", "H": "Ôº®", "I": "Ôº©", "J": "Ôº™", "K": "Ôº´", "L": "Ôº¨", "M": "Ôº≠", "N": "ÔºÆ", "O": "ÔºØ", "P": "Ôº∞", "Q": "Ôº±", "R": "Ôº≤", "S": "Ôº≥", "T": "Ôº¥", "U": "Ôºµ", "V": "Ôº∂", "W": "Ôº∑", "X": "Ôº∏", "Y": "Ôºπ", "Z": "Ôº∫", "[": "Ôºª", "\\": "Ôºº", "]": "ÔºΩ", "^": "Ôºæ", "_": "Ôºø", "`": "ÔΩÄ", "a": "ÔΩÅ", "b": "ÔΩÇ", "c": "ÔΩÉ", "d": "ÔΩÑ", "e": "ÔΩÖ", "f": "ÔΩÜ", "g": "ÔΩá", "h": "ÔΩà", "i": "ÔΩâ", "j": "ÔΩä", "k": "ÔΩã", "l": "ÔΩå", "m": "ÔΩç", "n": "ÔΩé", "o": "ÔΩè", "p": "ÔΩê", "q": "ÔΩë", "r": "ÔΩí", "s": "ÔΩì", "t": "ÔΩî", "u": "ÔΩï", "v": "ÔΩñ", "w": "ÔΩó", "x": "ÔΩò", "y": "ÔΩô", "z": "ÔΩö", "{": "ÔΩõ", "|": "ÔΩú", "}": "ÔΩù", "~": "ÔΩû"
      };
      return text
        .split("")
        .map((char) => fullWidthMap[char] || char)
        .join("");
    },
    "Hebrew Like": (text: string) => {
      const hebrewLikeMap = {
        "a": "◊•", "b": "◊ß", "c": "—î", "d": "‡πè", "e": "–≥", "f": "◊ß", "g": "‡∏£", "h": "’á", "i": "—î", "j": "◊•", "k": "‡πè", "l": "–≥", "m": "◊ß", "n": "‡∏£", "o": "’á", "p": "—î", "q": "◊•", "r": "◊ß", "s": "‡∏£", "t": "’á", "u": "‡∏¢", "v": "œÇ", "w": "‡∏¨", "x": "œá", "y": "◊•", "z": "z",
        "A": "◊•", "B": "◊ß", "C": "—î", "D": "‡πè", "E": "–≥", "F": "◊ß", "G": "‡∏£", "H": "’á", "I": "—î", "J": "◊•", "K": "‡πè", "L": "–≥", "M": "◊ß", "N": "‡∏£", "O": "’á", "P": "—î", "Q": "◊•", "R": "◊ß", "S": "‡∏£", "T": "’á", "U": "‡∏¢", "V": "œÇ", "W": "‡∏¨", "X": "œá", "Y": "◊•", "Z": "z"
      };
      return text
        .split("")
        .map((char) => hebrewLikeMap[char] || char)
        .join("");
    },
    "Negative Squared": (text: string) => {
      const negativeSquaredMap = {
        "a": "üÖ∞", "b": "üÖ±", "c": "üÖ≤", "d": "üÖ≥", "e": "üÖ¥", "f": "üÖµ", "g": "üÖ∂", "h": "üÖ∑", "i": "üÖ∏", "j": "üÖπ", "k": "üÖ∫", "l": "üÖª", "m": "üÖº", "n": "üÖΩ", "o": "üÖæ", "p": "üÖø", "q": "üÜÄ", "r": "üÜÅ", "s": "üÜÇ", "t": "üÜÉ", "u": "üÜÑ", "v": "üÜÖ", "w": "üÜÜ", "x": "üÜá", "y": "üÜà", "z": "üÜâ",
        "A": "üÖ∞", "B": "üÖ±", "C": "üÖ≤", "D": "üÖ≥", "E": "üÖ¥", "F": "üÖµ", "G": "üÖ∂", "H": "üÖ∑", "I": "üÖò", "J": "üÖô", "K": "üÖ∫", "L": "üÖª", "M": "üÖº", "N": "üÖΩ", "O": "üÖæ", "P": "üÖø", "Q": "üÜÄ", "R": "üÜÅ", "S": "üÜÇ", "T": "üÜÉ", "U": "üÜÑ", "V": "üÜÖ", "W": "üÜÜ", "X": "üÜá", "Y": "üÜà", "Z": "üÜâ",
        "0": "‚ì™", "1": "‚ë†", "2": "‚ë°", "3": "‚ë¢", "4": "‚ë£", "5": "‚ë§", "6": "‚ë•", "7": "‚ë¶", "8": "‚ëß", "9": "‚ë®"
      };
      return text
        .split("")
        .map((char) => negativeSquaredMap[char] || char)
        .join("");
    },
     "Cursive Handwriting": (text: string) => {
      const cursiveHandwritingMap = {
        "y": "·Éß", "s": " Ç", "c": "∆à", "h": "‘ã", "e": "“Ω", "r": "…æ"
      };
      return text
        .split("")
        .map((char) => cursiveHandwritingMap[char] || char)
        .join("");
    },
    "CJK Like": (text: string) => {
      const cjkLikeMap = {
        "T": "T", "Y": "„Å®", "P": "Â∞∏", "E": "„É®", "O": "Âõû", "R": "Â∞∫", "A": "‰∏π", "S": "‰∏Ç", "C": "„Å®", "N": "ÂàÄ", "H": "Âªæ"
      };
      return text
        .split("")
        .map((char) => cjkLikeMap[char] || char)
        .join("");
    },
    "Lisu": (text: string) => {
      const lisuMap = {
        "a": "ÍÅ≤", "b": "ÍÑ≥", "c": "ÍÑª", "d": "ÍÑç", "e": "ÍÑü", "f": "ÍÑ¶", "g": "ÍÑß", "h": "ÍÑ¢", "i": "ÍÑ®", "j": "ÍÑ©", "k": "ÍÑ™", "l": "ÍÑ´", "m": "ÍÑ≠", "n": "ÍÑß", "o": "ÍÑ¨", "p": "ÍÑ±", "q": "ÍÑ∏", "r": "ÍÑ≤", "s": "ÍÑ≥", "t": "ÍÑÆ", "u": "ÍÑØ", "v": "ÍÑ≤", "w": "ÍÑü", "x": "ÍÑó", "y": "Íå¶", "z": "ÍÑû",
        "A": "Íêé", "B": "Íå©", "C": "ÍÑí", "D": "ÍÑü", "E": "ÍÑç", "F": "ÍÑû", "G": "Íåó", "H": "Íå†", "I": "Íå§", "J": "Íåû", "K": "Íåï", "L": "Íåó", "M": "Íå©", "N": "Íå¶", "O": "Íåú", "P": "Íå§", "Q": "Íåö", "R": "Íå©", "S": "Íå™", "T": "Íå§", "U": "Íå¨", "V": "Íå≠", "W": "ÍåÆ", "X": "ÍåØ", "Y": "Íå©", "Z": "Íå®",
        "0": "ÍÑ∂", "1": "ÍÑ∏", "2": "ÍÑπ", "3": "ÍÑ∫", "4": "ÍÑª", "5": "ÍÑº", "6": "ÍÑΩ", "7": "ÍÑæ", "8": "ÍÑø", "9": "ÍÖÄ"
      };
      return text
        .split("")
        .map((char) => lisuMap[char] || char)
        .join("");
    },
     "Script Math": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1D49C;
      const baseStartLower = 0x1D4B6;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(baseStartUpper + (charCode - baseOffset));
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1D7D0 + (charCode - 48));
        }
         else {
          output += text[i];
        }
      }
      return text
        .split("")
        .map((char) => scriptMathMap[char] || char)
        .join("");
    },
    "Fraktur Math": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1D504;
      const baseStartLower = 0x1D51E;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(baseStartUpper + (charCode - baseOffset));
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1D7DA + (charCode - 48));
        }
         else {
          output += text[i];
        }
      }
      return output;
    },
     "Circled": (text: string) => {
      const circledMap = {
        "A": "‚í∂", "B": "‚í∑", "C": "‚í∏", "D": "‚íπ", "E": "‚í∫", "F": "‚íª", "G": "‚íº", "H": "‚íΩ", "I": "‚íæ", "J": "‚íø", "K": "‚ìÄ", "L": "‚ìÅ", "M": "‚ìÇ", "N": "‚ìÉ", "O": "‚ìÑ", "P": "‚ìÖ", "Q": "‚ìÜ", "R": "‚ìá", "S": "‚ìà", "T": "‚ìâ", "U": "‚ìä", "V": "‚ìã", "W": "‚ìå", "X": "‚ìç", "Y": "‚ìé", "Z": "‚ìè",
        "a": "‚ìê", "b": "‚ìë", "c": "‚ìí", "d": "‚ìì", "e": "‚ìî", "f": "‚ìï", "g": "‚ìñ", "h": "‚ìó", "i": "‚ìò", "j": "‚ìô", "k": "‚ìö", "l": "‚ìõ", "m": "‚ìú", "n": "‚ìù", "o": "‚ìû", "p": "‚ìü", "q": "‚ì†", "r": "‚ì°", "s": "‚ì¢", "t": "‚ì£", "u": "‚ì§", "v": "‚ì•", "w": "‚ì¶", "x": "‚ìß", "y": "‚ì®", "z": "‚ì©",
        "0": "‚ì™", "1": "‚ë†", "2": "‚ë°", "3": "‚ë¢", "4": "‚ë£", "5": "‚ë§", "6": "‚ë•", "7": "‚ë¶", "8": "‚ëß", "9": "‚ë®"
      };
      return text
        .split("")
        .map((char) => circledMap[char] || char)
        .join("");
    },
     "Block Like": (text: string) => {
      const blockLikeMap = {
        "T": "T", "Y": "Y", "P": "·ë≠", "E": "E", "O": "O", "R": "·ñá", "A": "·ó©", "S": "·îï", "C": "·ëï", "N": "·ëé", "H": "·ïº"
      };
      return text
        .split("")
        .map((char) => blockLikeMap[char] || char)
        .join("");
    },
    // Other font styles...
  };

export { fontStyles };
</diff>
</replace_in_file>
