import React, { useState } from "react";
import { Textarea } from "@/components/ui/textarea";
import { ToolLayout } from "./ToolLayout";

const FacebookFontGenerator = () => {
  console.log("FacebookFontGenerator component rendered");
  const [inputText, setInputText] = useState("");
  const [outputText, setOutputText] = useState("");

  const fontStyles = {
    "Normal Text": (text: string) => text,
    Enclosed: (text: string) => {
      const enclosedMap = {
        a: "üÖê",
        b: "üÖë",
        c: "üÖí",
        d: "üÖì",
        e: "üÖî",
        f: "üÖï",
        g: "üÖñ",
        h: "üÖó",
        i: "üÖò",
        j: "üÖô",
        k: "üÖö",
        l: "üÖõ",
        m: "üÖú",
        n: "üÖù",
        o: "üÖû",
        p: "üÖü",
        q: "üÖ†",
        r: "üÖ°",
        s: "üÖ¢",
        t: "üÖ£",
        u: "üÖ§",
        v: "üÖ•",
        w: "üÖ¶",
        x: "üÖß",
        y: "üÖ®",
        z: "üÖ©",
        A: "üÖê",
        B: "üÖë",
        C: "üÖí",
        D: "üÖì",
        E: "üÖî",
        F: "üÖï",
        G: "üÖñ",
        H: "üÖó",
        I: "üÖò",
        J: "üÖô",
        K: "üÖö",
        L: "üÖõ",
        M: "üÖú",
        N: "üÖù",
        O: "üÖû",
        P: "üÖü",
        Q: "üÖ†",
        R: "üÖ°",
        S: "üÖ¢",
        T: "üÖ£",
        U: "üÖ§",
        V: "üÖ•",
        W: "üÖ¶",
        X: "üÖß",
        Y: "üÖ®",
        Z: "üÖ©",
        "0": "‚ì™",
        "1": "‚ë†",
        "2": "‚ë°",
        "3": "‚ë¢",
        "4": "‚ë£",
        "5": "‚ë§",
        "6": "‚ë•",
        "7": "‚ë¶",
        "8": "‚ëß",
        "9": "‚ë®",
      };
      return text
        .split("")
        .map((char) => enclosedMap[char] || char)
        .join("");
    },
    "Bold Sans": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1d5b2;
      const baseStartLower = 0x1d5ea;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(
            baseStartUpper + (charCode - baseOffset)
          );
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1d7d8 + (charCode - 48));
        } else {
          output += text[i];
        }
      }
      return output;
    },
    "Italic Math": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1d434;
      const baseStartLower = 0x1d44e;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(
            baseStartUpper + (charCode - baseOffset)
          );
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1d7c0 + (charCode - 48));
        } else {
          output += text[i];
        }
      }
      return output;
    },
    "Full Width": (text: string) => {
      const fullWidthMap = {
        " ": "„ÄÄ",
        "!": "ÔºÅ",
        '"': "ÔºÇ",
        "#": "ÔºÉ",
        $: "ÔºÑ",
        "%": "ÔºÖ",
        "&": "ÔºÜ",
        "'": "Ôºá",
        "(": "Ôºà",
        ")": "Ôºâ",
        "*": "Ôºä",
        "+": "Ôºã",
        ",": "Ôºå",
        "-": "Ôºç",
        ".": "Ôºé",
        "/": "Ôºè",
        "0": "Ôºê",
        "1": "Ôºë",
        "2": "Ôºí",
        "3": "Ôºì",
        "4": "Ôºî",
        "5": "Ôºï",
        "6": "Ôºñ",
        "7": "Ôºó",
        "8": "Ôºò",
        "9": "Ôºô",
        ":": "Ôºö",
        ";": "Ôºõ",
        "<": "Ôºú",
        "=": "Ôºù",
        ">": "Ôºû",
        "?": "Ôºü",
        "@": "Ôº†",
        A: "Ôº°",
        B: "Ôº¢",
        C: "Ôº£",
        D: "Ôº§",
        E: "Ôº•",
        F: "Ôº¶",
        G: "Ôºß",
        H: "Ôº®",
        I: "Ôº©",
        J: "Ôº™",
        K: "Ôº´",
        L: "Ôº¨",
        M: "Ôº≠",
        N: "ÔºÆ",
        O: "ÔºØ",
        P: "Ôº∞",
        Q: "Ôº±",
        R: "Ôº≤",
        S: "Ôº≥",
        T: "Ôº¥",
        U: "Ôºµ",
        V: "Ôº∂",
        W: "Ôº∑",
        X: "Ôº∏",
        Y: "Ôºπ",
        Z: "Ôº∫",
        "[": "Ôºª",
        "\\": "Ôºº",
        "]": "ÔºΩ",
        "^": "Ôºæ",
        _: "Ôºø",
        "`": "ÔΩÄ",
        a: "ÔΩÅ",
        b: "ÔΩÇ",
        c: "ÔΩÉ",
        d: "ÔΩÑ",
        e: "ÔΩÖ",
        f: "ÔΩÜ",
        g: "ÔΩá",
        h: "ÔΩà",
        i: "ÔΩâ",
        j: "ÔΩä",
        k: "ÔΩã",
        l: "ÔΩå",
        m: "ÔΩç",
        n: "ÔΩé",
        o: "ÔΩè",
        p: "ÔΩê",
        q: "ÔΩë",
        r: "ÔΩí",
        s: "ÔΩì",
        t: "ÔΩî",
        u: "ÔΩï",
        v: "ÔΩñ",
        w: "ÔΩó",
        x: "ÔΩò",
        y: "ÔΩô",
        z: "ÔΩö",
        "{": "ÔΩõ",
        "|": "ÔΩú",
        "}": "ÔΩù",
        "~": "ÔΩû",
      };
      return text
        .split("")
        .map((char) => fullWidthMap[char] || char)
        .join("");
    },
    "Hebrew Like": (text: string) => {
      const hebrewLikeMap = {
        a: "◊•",
        b: "◊ß",
        c: "—î",
        d: "‡πè",
        e: "–≥",
        f: "◊ß",
        g: "‡∏£",
        h: "’á",
        i: "—î",
        j: "◊•",
        k: "‡πè",
        l: "–≥",
        m: "◊ß",
        n: "‡∏£",
        o: "’á",
        p: "—î",
        q: "◊•",
        r: "◊ß",
        s: "‡∏£",
        t: "’á",
        u: "‡∏¢",
        v: "œÇ",
        w: "‡∏¨",
        x: "œá",
        y: "◊•",
        z: "z",
        A: "◊•",
        B: "◊ß",
        C: "—î",
        D: "‡πè",
        E: "–≥",
        F: "◊ß",
        G: "‡∏£",
        H: "’á",
        I: "—î",
        J: "◊•",
        K: "‡πè",
        L: "–≥",
        M: "◊ß",
        N: "‡∏£",
        O: "’á",
        P: "—î",
        Q: "◊•",
        R: "◊ß",
        S: "‡∏£",
        T: "’á",
        U: "‡∏¢",
        V: "œÇ",
        W: "‡∏¨",
        X: "œá",
        Y: "◊•",
        Z: "z",
      };
      return text
        .split("")
        .map((char) => hebrewLikeMap[char] || char)
        .join("");
    },
    "Negative Squared": (text: string) => {
      const negativeSquaredMap = {
        a: "üÖ∞",
        b: "üÖ±",
        c: "üÖ≤",
        d: "üÖ≥",
        e: "üÖ¥",
        f: "üÖµ",
        g: "üÖ∂",
        h: "üÖ∑",
        i: "üÖ∏",
        j: "üÖπ",
        k: "üÖ∫",
        l: "üÖª",
        m: "üÖº",
        n: "üÖΩ",
        o: "üÖæ",
        p: "üÖø",
        q: "üÜÄ",
        r: "üÜÅ",
        s: "üÜÇ",
        t: "üÜÉ",
        u: "üÜÑ",
        v: "üÜÖ",
        w: "üÜÜ",
        x: "üÜá",
        y: "üÜà",
        z: "üÜâ",
        A: "üÖ∞",
        B: "üÖ±",
        C: "üÖ≤",
        D: "üÖ≥",
        E: "üÖ¥",
        F: "üÖµ",
        G: "üÖ∂",
        H: "üÖ∑",
        I: "üÖ∏",
        J: "üÖπ",
        K: "üÖ∫",
        L: "üÖª",
        M: "üÖº",
        N: "üÖΩ",
        O: "üÖæ",
        P: "üÖø",
        Q: "üÜÄ",
        R: "üÜÅ",
        S: "üÜÇ",
        T: "üÜÉ",
        U: "üÜÑ",
        V: "üÜÖ",
        W: "üÜÜ",
        X: "üÜá",
        Y: "üÜà",
        Z: "üÜâ",
        "0": "‚ì™",
        "1": "‚ë†",
        "2": "‚ë°",
        "3": "‚ë¢",
        "4": "‚ë£",
        "5": "‚ë§",
        "6": "‚ë•",
        "7": "‚ë¶",
        "8": "‚ëß",
        "9": "‚ë®",
      };
      return text
        .split("")
        .map((char) => negativeSquaredMap[char] || char)
        .join("");
    },
    "Cursive Handwriting": (text: string) => {
      const cursiveHandwritingMap = {
        y: "·Éß",
        s: " Ç",
        c: "∆à",
        h: "‘ã",
        e: "“Ω",
        r: "…æ",
      };
      return text
        .split("")
        .map((char) => cursiveHandwritingMap[char] || char)
        .join("");
    },
    Lisu: (text: string) => {
      const lisuMap = {
        a: "ÍÅ≤",
        b: "ÍÑ≥",
        c: "ÍÑª",
        d: "ÍÑç",
        e: "ÍÑü",
        f: "ÍÑ¶",
        g: "ÍÑß",
        h: "ÍÑ¢",
        i: "ÍÑ®",
        j: "ÍÑ©",
        k: "ÍÑ™",
        l: "ÍÑ´",
        m: "ÍÑ≠",
        n: "ÍÑß",
        o: "ÍÑ¨",
        p: "ÍÑ±",
        q: "ÍÑ∏",
        r: "ÍÑ≤",
        s: "ÍÑ≥",
        t: "ÍÑÆ",
        u: "ÍÑØ",
        v: "ÍÑ≤",
        w: "ÍÑü",
        x: "ÍÑó",
        y: "Íå¶",
        z: "ÍÑû",
        A: "Íêé",
        B: "Íå©",
        C: "ÍÑí",
        D: "ÍÑü",
        E: "ÍÑç",
        F: "ÍÑû",
        G: "Íåó",
        H: "Íå†",
        I: "Íå§",
        J: "Íåû",
        K: "Íåï",
        L: "Íåó",
        M: "Íå©",
        N: "Íå¶",
        O: "Íåú",
        P: "Íå§",
        Q: "Íåö",
        R: "Íå©",
        S: "Íå™",
        T: "Íå§",
        U: "Íå¨",
        V: "Íå≠",
        W: "ÍåÆ",
        X: "ÍåØ",
        Y: "Íå©",
        Z: "Íå®",
        "0": "ÍÑ∂",
        "1": "ÍÑ∏",
        "2": "ÍÑπ",
        "3": "ÍÑ∫",
        "4": "ÍÑª",
        "5": "ÍÑº",
        "6": "ÍÑΩ",
        "7": "ÍÑæ",
        "8": "ÍÑø",
        "9": "ÍÖÄ",
      };
      return text
        .split("")
        .map((char) => lisuMap[char] || char)
        .join("");
    },
    "Script Math": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1d49c;
      const baseStartLower = 0x1d4b6;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(
            baseStartUpper + (charCode - baseOffset)
          );
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1d7d0 + (charCode - 48));
        } else {
          output += text[i];
        }
      }
      return output;
    },
    "Fraktur Math": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1d504;
      const baseStartLower = 0x1d51e;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(
            baseStartUpper + (charCode - baseOffset)
          );
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1d7da + (charCode - 48));
        } else {
          output += text[i];
        }
      }
      return output;
    },
    Circled: (text: string) => {
      const circledMap = {
        A: "‚í∂",
        B: "‚í∑",
        C: "‚í∏",
        D: "‚íπ",
        E: "‚í∫",
        F: "‚íª",
        G: "‚íº",
        H: "‚íΩ",
        I: "‚íæ",
        J: "‚íø",
        K: "‚ìÄ",
        L: "‚ìÅ",
        M: "‚ìÇ",
        N: "‚ìÉ",
        O: "‚ìÑ",
        P: "‚ìÖ",
        Q: "‚ìÜ",
        R: "‚ìá",
        S: "‚ìà",
        T: "‚ìâ",
        U: "‚ìä",
        V: "‚ìã",
        W: "‚ìå",
        X: "‚ìç",
        Y: "‚ìé",
        Z: "‚ìè",
        a: "‚ìê",
        b: "‚ìë",
        c: "‚ìí",
        d: "‚ìì",
        e: "‚ìî",
        f: "‚ìï",
        g: "‚ìñ",
        h: "‚ìó",
        i: "‚ìò",
        j: "‚ìô",
        k: "‚ìö",
        l: "‚ìõ",
        m: "‚ìú",
        n: "‚ìù",
        o: "‚ìû",
        p: "‚ìü",
        q: "‚ì†",
        r: "‚ì°",
        s: "‚ì¢",
        t: "‚ì£",
        u: "‚ì§",
        v: "‚ì•",
        w: "‚ì¶",
        x: "‚ìß",
        y: "‚ì®",
        z: "‚ì©",
        "0": "‚ì™",
        "1": "‚ë†",
        "2": "‚ë°",
        "3": "‚ë¢",
        "4": "‚ë£",
        "5": "‚ë§",
        "6": "‚ë•",
        "7": "‚ë¶",
        "8": "‚ëß",
        "9": "‚ë®",
      };
      return text
        .split("")
        .map((char) => circledMap[char] || char)
        .join("");
    },
    "Block Like": (text: string) => {
      const blockLikeMap = {
        T: "T",
        Y: "Y",
        P: "·ë≠",
        E: "E",
        O: "O",
        R: "·ñá",
        A: "·ó©",
        S: "·îï",
        C: "·ëï",
        N: "·ëé",
        H: "·ïº",
      };
      return text
        .split("")
        .map((char) => blockLikeMap[char] || char)
        .join("");
    },
    "Georgian/Cyrillic Mix": (text: string) => {
      const map = {
        T: "T",
        y: "·Éß",
        p: "œÅ",
        e: "“Ω",
        o: "œÉ",
        r: "…æ",
        a: "Œ±",
        s: " Ç",
        t: "∆ö",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },
    "Small Caps Font": (text: string) => {
      const map = {
        T: "T",
        y: "Íå¶",
        p: "Íâ£",
        e: "ÍèÇ",
        o: "ÍÑ≤",
        r: "Íã™",
        a: "Íã¨",
        s: "Íáô",
        t: "Íá∂",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },
    "Gothic/Fraktur": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1d504;
      const baseStartLower = 0x1d51e;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(
            baseStartUpper + (charCode - baseOffset)
          );
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else {
          output += text[i];
        }
      }
      return output;
    },
    "Fullwidth/Aesthetic": (text: string) => {
      const fullWidthMap = {
        " ": "„ÄÄ",
        "!": "ÔºÅ",
        '"': "ÔºÇ",
        "#": "ÔºÉ",
        $: "ÔºÑ",
        "%": "ÔºÖ",
        "&": "ÔºÜ",
        "'": "Ôºá",
        "(": "Ôºà",
        ")": "Ôºâ",
        "*": "Ôºä",
        "+": "Ôºã",
        ",": "Ôºå",
        "-": "Ôºç",
        ".": "Ôºé",
        "/": "Ôºè",
        "0": "Ôºê",
        "1": "Ôºë",
        "2": "Ôºí",
        "3": "Ôºì",
        "4": "Ôºî",
        "5": "Ôºï",
        "6": "Ôºñ",
        "7": "Ôºó",
        "8": "Ôºò",
        "9": "Ôºô",
        ":": "Ôºö",
        ";": "Ôºõ",
        "<": "Ôºú",
        "=": "Ôºù",
        ">": "Ôºû",
        "?": "Ôºü",
        "@": "Ôº†",
        A: "Ôº°",
        B: "Ôº¢",
        C: "Ôº£",
        D: "Ôº§",
        E: "Ôº•",
        F: "Ôº¶",
        G: "Ôºß",
        H: "Ôº®",
        I: "Ôº©",
        J: "Ôº™",
        K: "Ôº´",
        L: "Ôº¨",
        M: "Ôº≠",
        N: "ÔºÆ",
        O: "ÔºØ",
        P: "Ôº∞",
        Q: "Ôº±",
        R: "Ôº≤",
        S: "Ôº≥",
        T: "Ôº¥",
        U: "Ôºµ",
        V: "Ôº∂",
        W: "Ôº∑",
        X: "Ôº∏",
        Y: "Ôºπ",
        Z: "Ôº∫",
        "[": "Ôºª",
        "\\": "Ôºº",
        "]": "ÔºΩ",
        "^": "Ôºæ",
        _: "Ôºø",
        "`": "ÔΩÄ",
        a: "ÔΩÅ",
        b: "ÔΩÇ",
        c: "ÔΩÉ",
        d: "ÔΩÑ",
        e: "ÔΩÖ",
        f: "ÔΩÜ",
        g: "ÔΩá",
        h: "ÔΩà",
        i: "ÔΩâ",
        j: "ÔΩä",
        k: "ÔΩã",
        l: "ÔΩå",
        m: "ÔΩç",
        n: "ÔΩé",
        o: "ÔΩè",
        p: "ÔΩê",
        q: "ÔΩë",
        r: "ÔΩí",
        s: "ÔΩì",
        t: "ÔΩî",
        u: "ÔΩï",
        v: "ÔΩñ",
        w: "ÔΩó",
        x: "ÔΩò",
        y: "ÔΩô",
        z: "ÔΩö",
        "{": "ÔΩõ",
        "|": "ÔΩú",
        "}": "ÔΩù",
        "~": "ÔΩû",
      };
      return text
        .split("")
        .map((char) => fullWidthMap[char] || char)
        .join("");
    },
    "Cursive Script": (text: string) => {
      const map = {
        T: "ùì£",
        y: "ùîÇ",
        p: "ùìπ",
        e: "ùìÆ",
        o: "ùì∏",
        r: "ùìª",
        a: "ùì™",
        s: "ùìº",
        t: "ùìΩ",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },
    "Squared Letters": (text: string) => {
      const map = {
        T: "üÖÉ",
        y: "üÖà",
        p: "üÑø",
        e: "üÑ¥",
        o: "üÑæ",
        r: "üÖÅ",
        a: "üÑ∞",
        s: "üÖÇ",
        t: "üÖÉ",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },
    "Circled Letters": (text: string) => {
      const map = {
        T: "‚ìâ",
        y: "‚ì®",
        p: "‚ìü",
        e: "‚ìî",
        o: "‚ìû",
        r: "‚ì°",
        a: "‚ìê",
        s: "‚ì¢",
        t: "‚ì£",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },
    "Small Caps": (text: string) => {
      const map = {
        T: "T",
        y: " è",
        p: "·¥ò",
        e: "·¥á",
        o: "·¥è",
        r: " Ä",
        a: "·¥Ä",
        s: "Íú±",
        t: "·¥õ",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },
    Script: (text: string) => {
      const map = {
        T: "ùíØ",
        y: "ùìé",
        p: "ùìÖ",
        e: "‚ÑØ",
        o: "‚Ñ¥",
        r: "ùìá",
        a: "ùí∂",
        s: "ùìà",
        t: "ùìâ",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },
    Italic: (text: string) => {
      let output = "";
      const baseStartUpper = 0x1d400;
      const baseStartLower = 0x1d41a;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(
            baseStartUpper + (charCode - baseOffset)
          );
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else {
          output += text[i];
        }
      }
      return output;
    },
    Bold: (text: string) => {
      let output = "";
      const baseStartUpper = 0x1d400;
      const baseStartLower = 0x1d41a;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(0x1d400 + (charCode - 65)); // Bold Upper
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(0x1d41a + (charCode - 97)); // Bold Lower
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1d7ce + (charCode - 48)); // Bold number
        } else {
          output += text[i];
        }
      }
      return output;
    },
    "Currency/Symbol Mix": (text: string) => {
      const map = {
        T: "T",
        y: "…é",
        p: "‚Ç±",
        e: "…Ü",
        o: "√ò",
        r: "‚±§",
        a: "‚Ç≥",
        s: "‚Ç¥",
        t: "‚ÇÆ",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },
    "Medieval/Gothic": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1d504;
      const baseStartLower = 0x1d51e;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(
            baseStartUpper + (charCode - baseOffset)
          );
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else {
          output += text[i];
        }
      }
      return output;
    },

    "Rune-like": (text: string) => {
      const map = {
        T: "T",
        y: "Íêû",
        p: "Íâ£",
        e: "Íàº",
        o: "ÍÇ¶",
        r: "ÍåÖ",
        a: "ÍÅ≤",
        s: "Íåö",
        t: "ÍÖÄ",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },
    "Thai-influenced": (text: string) => {
      const map = {
        T: "T",
        y: "◊•",
        p: "◊ß",
        e: "—î",
        o: "‡πè",
        r: "–≥",
        a: "‡∏Ñ",
        s: "‡∏£",
        t: "’á",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },
    "Squared Bold": (text: string) => {
      const map = {
        T: "üÜÉ",
        y: "üÜà",
        p: "üÖø",
        e: "üÖ¥",
        o: "üÖæ",
        r: "üÜÅ",
        a: "üÖ∞",
        s: "üÜÇ",
        t: "üÜÉ",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },
    Monospace: (text: string) => {
      let output = "";
      const baseStartUpper = 0x1d670;
      const baseStartLower = 0x1d68a;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(
            baseStartUpper + (charCode - baseOffset)
          );
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1d7f6 + (charCode - 48));
        } else {
          output += text[i];
        }
      }
      return output;
    },
    "Bold Sans-Serif": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1d5a0;
      const baseStartLower = 0x1d5ba;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(
            baseStartUpper + (charCode - baseOffset)
          );
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1d7d8 + (charCode - 48));
        } else {
          output += text[i];
        }
      }
      return output;
    },
    "Small Caps Bold": (text: string) => {
      const map = {
        T: "T",
        y: "Y",
        p: "·ë≠",
        e: "E",
        o: "O",
        r: "·ñá",
        a: "A",
        s: "S",
        t: "T",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },

    "Japanese-inspired": (text: string) => {
      const map = {
        T: "T",
        y: "„Å®",
        p: "Â∞∏",
        e: "„É®",
        o: "Âõû",
        r: "Â∞∫",
        a: "‰∏π",
        s: "‰∏Ç",
        t: "Âåï",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },

    "Armenian Mix": (text: string) => {
      const map = {
        T: "T",
        y: " è",
        p: "÷Ñ",
        e: "…õ",
        o: "÷Ö",
        r: " Ä",
        a: "«ü",
        s: "÷Ü",
        t: "»∂",
      };
      return text
        .split("")
        .map((char) => map[char] || char)
        .join("");
    },

    // Mixed Styles and Math Symbols are too complex for simple char maps.  You would need more advanced logic to mix styles.
  };

  const generateFonts = (text: string) => {
    let generatedText = "";
    for (const styleName in fontStyles) {
      generatedText += fontStyles[styleName](text) + "\n";
    }
    setOutputText(generatedText);
  };

  return (
    <ToolLayout title="Facebook Font Generator" hideHeader={true}>
      <div className="container mx-auto p-4">
        <h1 className="text-3xl font-bold mb-4">Facebook Font Generator</h1>
        <div className="grid grid-cols-2 gap-4 flex">
          <div className="flex-1">
            <h2 className="text-lg font-semibold mb-2">Input Text</h2>
            <Textarea
              placeholder="Type or paste your content here"
              value={inputText}
              onChange={(e) => {
                setInputText(e.target.value);
                generateFonts(e.target.value);
              }}
              className="w-full min-h-[300px] mb-4 flex-1"
            />
          </div>
          <div className="flex-1">
            <h2 className="text-lg font-semibold mb-2">Output Text</h2>
            <Textarea
              readOnly
              placeholder="Styled text will appear here"
              value={outputText}
              className="flex-1 min-h-[300px]"
            />
          </div>
        </div>
      </div>
    </ToolLayout>
  );
};

export default FacebookFontGenerator;
