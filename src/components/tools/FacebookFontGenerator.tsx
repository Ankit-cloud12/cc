import React, { useState } from "react";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { ToolLayout } from "./ToolLayout";

const FacebookFontGenerator = () => {
  const [inputText, setInputText] = useState("");
  const [copied, setCopied] = useState(false);
  const [outputText, setOutputText] = useState("");

  const fontStyles = {
    "Normal Text": (text: string) => text,
    Enclosed: (text: string) => {
      const enclosedMap = {
        a: "üÖê", b: "üÖë", c: "üÖí", d: "üÖì", e: "üÖî", f: "üÖï", g: "üÖñ", h: "üÖó", i: "üÖò", j: "üÖô",
        k: "üÖö", l: "üÖõ", m: "üÖú", n: "üÖù", o: "üÖû", p: "üÖü", q: "üÖ†", r: "üÖ°", s: "üÖ¢", t: "üÖ£",
        u: "üÖ§", v: "üÖ•", w: "üÖ¶", x: "üÖß", y: "üÖ®", z: "üÖ©",
        A: "üÖê", B: "üÖë", C: "üÖí", D: "üÖì", E: "üÖî", F: "üÖï", G: "üÖñ", H: "üÖó", I: "üÖò", J: "üÖô",
        K: "üÖö", L: "üÖõ", M: "üÖú", N: "üÖù", O: "üÖû", P: "üÖü", Q: "üÖ†", R: "üÖ°", S: "üÖ¢", T: "üÖ£",
        U: "üÖ§", V: "üÖ•", W: "üÖ¶", X: "üÖß", Y: "üÖ®", Z: "üÖ©",
        "0": "‚ì™", "1": "‚ë†", "2": "‚ë°", "3": "‚ë¢", "4": "‚ë£", "5": "‚ë§", "6": "‚ë•", "7": "‚ë¶", "8": "‚ëß", "9": "‚ë®"
      };
      return text.split("").map((char) => enclosedMap[char] || char).join("");
    },
    "Full Width": (text: string) => {
      const fullWidthMap = {
        " ": "„ÄÄ", "!": "ÔºÅ", '"': "ÔºÇ", "#": "ÔºÉ", $: "ÔºÑ", "%": "ÔºÖ", "&": "ÔºÜ", "'": "Ôºá",
        "(": "Ôºà", ")": "Ôºâ", "*": "Ôºä", "+": "Ôºã", ",": "Ôºå", "-": "Ôºç", ".": "Ôºé", "/": "Ôºè",
        "0": "Ôºê", "1": "Ôºë", "2": "Ôºí", "3": "Ôºì", "4": "Ôºî", "5": "Ôºï", "6": "Ôºñ", "7": "Ôºó", "8": "Ôºò", "9": "Ôºô",
        ":": "Ôºö", ";": "Ôºõ", "<": "Ôºú", "=": "Ôºù", ">": "Ôºû", "?": "Ôºü", "@": "Ôº†",
        A: "Ôº°", B: "Ôº¢", C: "Ôº£", D: "Ôº§", E: "Ôº•", F: "Ôº¶", G: "Ôºß", H: "Ôº®", I: "Ôº©", J: "Ôº™",
        K: "Ôº´", L: "Ôº¨", M: "Ôº≠", N: "ÔºÆ", O: "ÔºØ", P: "Ôº∞", Q: "Ôº±", R: "Ôº≤", S: "Ôº≥", T: "Ôº¥",
        U: "Ôºµ", V: "Ôº∂", W: "Ôº∑", X: "Ôº∏", Y: "Ôºπ", Z: "Ôº∫",
        "[": "Ôºª", "\\": "Ôºº", "]": "ÔºΩ", "^": "Ôºæ", _: "Ôºø", "`": "ÔΩÄ",
        a: "ÔΩÅ", b: "ÔΩÇ", c: "ÔΩÉ", d: "ÔΩÑ", e: "ÔΩÖ", f: "ÔΩÜ", g: "ÔΩá", h: "ÔΩà", i: "ÔΩâ", j: "ÔΩä",
        k: "ÔΩã", l: "ÔΩå", m: "ÔΩç", n: "ÔΩé", o: "ÔΩè", p: "ÔΩê", q: "ÔΩë", r: "ÔΩí", s: "ÔΩì", t: "ÔΩî",
        u: "ÔΩï", v: "ÔΩñ", w: "ÔΩó", x: "ÔΩò", y: "ÔΩô", z: "ÔΩö",
        "{": "ÔΩõ", "|": "ÔΩú", "}": "ÔΩù", "~": "ÔΩû"
      };
      return text.split("").map((char) => fullWidthMap[char] || char).join("");
    },
    "Script Math": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1d49c;
      const baseStartLower = 0x1d4b6;
      const baseOffset = 65;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(baseStartUpper + (charCode - baseOffset));
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(baseStartLower + (charCode - 97));
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1d7d0 + (charCode - 48));
        } else {
          output += text[i];
        }
      }
      return output;
    },
    "Bold Sans": (text: string) => {
      let output = "";
      const baseStartUpper = 0x1d5d4;
      const baseStartLower = 0x1d5ee;
      for (let i = 0; i < text.length; i++) {
        let charCode = text.charCodeAt(i);
        if (charCode >= 65 && charCode <= 90) {
          output += String.fromCharCode(0x1d5d4 + (charCode - 65));
        } else if (charCode >= 97 && charCode <= 122) {
          output += String.fromCharCode(0x1d5ee + (charCode - 97));
        } else if (charCode >= 48 && charCode <= 57) {
          output += String.fromCharCode(0x1d7ec + (charCode - 48));
        } else {
          output += text[i];
        }
      }
      return output;
    },
    "Small Caps": (text: string) => {
      const smallCapsMap = {
        a: "·¥Ä", b: " ô", c: "·¥Ñ", d: "·¥Ö", e: "·¥á", f: "Íú∞", g: "…¢", h: " ú", i: "…™", j: "·¥ä",
        k: "·¥ã", l: " ü", m: "·¥ç", n: "…¥", o: "·¥è", p: "·¥ò", q: "Q", r: " Ä", s: "s", t: "·¥õ",
        u: "·¥ú", v: "·¥†", w: "·¥°", x: "x", y: " è", z: "·¥¢"
      };
      return text.split("").map((char) => smallCapsMap[char.toLowerCase()] || char).join("");
    }
  };

  const generateFonts = (text: string) => {
    let generatedText = "";
    for (const styleName in fontStyles) {
      generatedText += fontStyles[styleName](text) + "\n";
    }
    setOutputText(generatedText);
  };

  return (
    <ToolLayout title="Facebook Font Generator" hideHeader={true}>
      <div className="container mx-auto p-4">
        <h1 className="text-3xl font-bold mb-2">Facebook Font Generator</h1>
        <p className="text-gray-600 dark:text-gray-300 mb-6">
          Convert your text into various stylish Facebook fonts and symbols.
        </p>

        <div className="flex flex-col md:flex-row gap-4 mb-4">
          <div className="w-full md:w-1/2">
            <Textarea
              placeholder="Type or paste your content here"
              value={inputText}
              onChange={(e) => {
                setInputText(e.target.value);
                generateFonts(e.target.value);
              }}
              className="w-full min-h-[300px] bg-zinc-700 text-white border-zinc-600 p-4 rounded resize"
            />
          </div>
          
          <div className="w-full md:w-1/2 space-y-2">
            <Textarea
              readOnly
              placeholder="Styled text will appear here"
              value={outputText}
              className="w-full min-h-[300px] bg-zinc-700 text-white border-zinc-600 p-4 rounded resize"
            />
            <div className="flex justify-end gap-2">
              <Button 
                variant="outline" 
                onClick={async () => {
                  try {
                    await navigator.clipboard.writeText(outputText);
                    setCopied(true);
                    setTimeout(() => setCopied(false), 2000);
                  } catch (err) {
                    console.error("Failed to copy text: ", err);
                  }
                }}
                disabled={!outputText}
                className="border-zinc-600"
              >
                {copied ? "Copied!" : "Copy Output"}
              </Button>
              
              <Button 
                onClick={() => {
                  setInputText("");
                  setOutputText("");
                }}
                className="border-zinc-600"
                variant="outline"
              >
                Clear All
              </Button>
            </div>
          </div>
        </div>
      </div>
    </ToolLayout>
  );
};

export default FacebookFontGenerator;
